<% this.adminPage = 'quote_image'; %>
<% include admin_header %>

<div id="vueApp">
  <div>
    <a class="ui small green button" @click="uploadHandler">
      <i class="plus icon"></i> 上传图片
    </a>
    <a class="ui small blue button" style="margin-left: 1em;" @click="reloadList">
      <i class="redo icon"></i> 刷新列表
    </a>
    <a class="ui small teal button" style="margin-left: 1em;" @click="reloadAll">
      <i class="sync icon"></i> 重新加载
    </a>
    <a class="ui small violet button" style="margin-left: 1em;" @click="showStatistics">
      <i class="info icon"></i> 统计信息
    </a>
  </div>
  <div class="ui divided items">
    <div class="ui item" v-for="quote of quotes">
      <div class="image">
        <img :src="quote.url">
      </div>
      <div class="content">
        <div class="header">{{ quote.filename }}</div>
        <div class="meta">
          <span class="from">from {{ quote.from }}</span>
          <span class="type">{{ quote.type }}</span>
          <span class="size">{{ formatSize(quote.size, 2) }}</span>
          <span class="time">{{ quote.time }}</span>
        </div>
        <div class="extra">
          <div class="ui small compact right floated buttons">
            <a class="ui blue button btn-preview" @click="previewItem(quote)">预览</a>
            <a class="ui red button btn-delete" @click="deleteItem(quote)">删除</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="modal-stat" class="ui modal">
    <div class="header">统计信息</div>
    <div class="content">
      <table v-if="stat" class="ui center aligned celled table">
        <thead>
          <tr>
            <th>来源</th>
            <th>总数</th>
            <th>文件大小</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="detail in stat.details">
            <td>{{ detail.from }}</td>
            <td>{{ detail.count }}</td>
            <td>{{ formatSize(detail.size, 2) }}</td>
          </tr>
          <tr>
            <td>总计</td>
            <td>{{ stat.summary.count }}</td>
            <td>{{ formatSize(stat.summary.size, 2) }}</td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class="actions">
      <div class="ui positive button">确定</div>
    </div>
  </div>
</div>

<form id="upload-form" style="display: none;">
  <input name="file" class="file" type="file" multiple>
</form>

<script src="<%- lib('vue/2.5.21/vue.min.js') %>"></script>

<script>

function formatSize(x, precision) {
      if (typeof x !== 'number') return '--';
      let unit = 'B', units = ['K', 'M', 'G', 'T'];
      for (let i in units) if (x > 1024) x /= 1024, unit = units[i];
      var fixed = x === Math.round(x) ? x.toString() : x.toFixed(precision);
      return fixed + ' ' + unit;
}

class QuoteStat {
  constructor() {
    this.count = 0;
    this.size = 0;
  }
  append(quote) {
    this.count += 1;
    this.size += quote.size;
  }
  toPlain() {
    return {
      count: this.count,
      size: this.size
    };
  }
}

let app = new Vue({
  el: '#vueApp',
  data: {
    loading: false,
    quotes: <%- JSON.stringify(quotes) %>,
    stat: null
  },
  methods: {
    uploadHandler() {
      modalPrompt({
        title: '上传语录',
        promptText: '你要上传谁的语录？',
        defaultValue: '',
        placeholder: '输入 TA 的名字……',
        textApprove: '开始！',
        textDeny: '算了吧',
        validate(text) {
          if (!text) return "名字还是要有的";
          if (text.length > 32) return "名字过长";
          if (!/^[0-9a-zA-Z-_]+$/.test(text)) return "名字过于奇怪";
          return null;
        }
      }).then((from) => {
        if (!from) return;
        let $form = $('#upload-form');
        let $input = $form.find('input.file');
        $input.val('').one('input', () => {
          if (!$input.prop('files').length) return;
          let formData = new FormData($form.get(0));
          $.ajax({
            method: 'POST',
            url: '/api/admin/quote_image/add/' + encodeURIComponent(from),
            data: formData,
            mimeType: "multipart/form-data",
            contentType: false,
            cache: false,
            processData: false
          }).done((data) => {
            data = JSON.parse(data);
            if (data.error) {
              modalConfirm({
                title: '似乎出了点小问题……',
                content: data.error,
                textApprove: '关闭'
              });
            } else {
              this.quotes.unshift(...data.result);
              modalConfirm({
                title: '上传完成',
                content: data.message,
                textApprove: '好的'
              });
            }
          }).fail((data) => {
              modalConfirm({
                title: '似乎出了点小问题……',
                content: '未知错误',
                textApprove: '关闭'
              });
          });
        }).get(0).click();
      });
    },
    reloadList() {
      if (this.loading) return;
      this.loading = true;
      $.get('/api/admin/quote_image/all', (data) => {
        if (data.error) {
          alert(data.error);
        } else {
          this.quotes = data.result;
        }
        this.loading = false;
      });
    },
    reloadAll() {
      $.post('/api/admin/quote_image/reload', (data) => {
        if (data.error) {
          alert(data.error);
        } else {
          this.quotes = data.result;
        }
      });
    },
    previewItem(quote) {
      modalConfirm({
        title: "预览",
        image: quote.url,
        contentType: "dom",
        textApprove: "关闭"
      });
    },
    deleteItem(quote) {
      modalConfirm({
        title: "删除语录",
        image: quote.url,
        content: ["确定删除这条语录吗？", "来源：" + quote.from, "文件名：" + quote.filename],
        textApprove: "确认",
        textDeny: "取消"
      }).then((answer) => {
        if (!answer) return;
        let src = encodeURIComponent(quote.from) + '/' + encodeURIComponent(quote.filename);
        $.post('/api/admin/quote_image/delete/' + src, (data) => {
          if (data.error) {
            alert(data.error);
          } else {
            let index = this.quotes.indexOf(quote);
            this.quotes.splice(index, 1);
          }
        });
      })
    },
    showStatistics() {
      let details = new Map(), summary = new QuoteStat;
      for (let quote of this.quotes) {
        let detail = details.get(quote.from);
        if (!detail) {
          details.set(quote.from, detail = new QuoteStat);
        }
        detail.append(quote);
        summary.append(quote);
      }
      this.stat = {
        details: Array.from(details).map(([from, detail]) => ({ from, ...detail.toPlain() })),
        summary: summary.toPlain()
      };
      $('#modal-stat').modal('show');
    }
  }
});

</script>

<div id="modal-confirm" class="ui modal">
  <div class="header"></div>
  <div class="content"></div>
  <div class="actions">
    <div class="ui negative button"></div>
    <div class="ui positive button"></div>
  </div>
</div>
<div id="modal-prompt" class="ui modal">
  <div class="header"></div>
  <div class="content">
    <p class="prompt-text"></p>
    <div class="ui fluid input">
      <input type="text">
    </div>
    <p class="error-text" style="color: red; margin-top: 1em;"></p>
  </div>
  <div class="actions">
    <div class="ui negative button"></div>
    <div class="ui positive button"></div>
  </div>
</div>

<script>

function modalConfirm({ title, image, content, contentType, textApprove, textDeny }) {
  return new Promise((resolve) => {
    let $modal = $('#modal-confirm');
    $modal.find('.header').text(title);
    let $content = $modal.find('.content');
    $content.html('');
    if (image) {
      $content.addClass('image').append($('<img>').prop('src', image));
      let $desc = $('<div class="description">');
      $content.append($desc);
      $content = $desc;
    } else {
      $content.removeClass('image');
    }
    if (contentType === 'dom') {
      $content.html('').append(content);
    } else if (contentType === 'html') {
      $content.html(content);
    } else {
      if (!Array.isArray(content)) content = [content];
      for (let line of content) {
        $content.append($('<p>').text(line));
      }
    }
    [
      [$modal.find('.positive.button'), textApprove],
      [$modal.find('.negative.button'), textDeny]
    ].forEach(([$btn, text]) => {
      if (text) {
        $btn.show().text(text);
      } else {
        $btn.hide();
      }
    });
    $modal.modal({
      onApprove: () => resolve(true),
      onDeny: () => resolve(false),
      onHide: () => resolve(null)
    }).modal('show');
  });
}

function modalPrompt({ title, promptText, placeholder, defaultValue, textApprove, textDeny, validate }) {
  return new Promise((resolve) => {
    let $modal = $('#modal-prompt');
    $modal.find('.header').text(title);
    let $content = $modal.find('.content');
    $content.find('.prompt-text').text(promptText);
    let $inputBox = $content.find('.ui.input');
    $inputBox.removeClass('error');
    let $input = $inputBox.find('input');
    $input.val(defaultValue).prop('placeholder', placeholder);
    let $error = $modal.find('.error-text');
    $error.hide();
    [
      [$modal.find('.positive.button'), textApprove],
      [$modal.find('.negative.button'), textDeny]
    ].forEach(([$btn, text]) => {
      if (text) {
        $btn.show().text(text);
      } else {
        $btn.hide();
      }
    });
    $modal.modal({
      onApprove: () => {
        let value = $input.val();
        if (typeof validate === 'function') {
          let result = validate(value);
          if (result) {
            $inputBox.addClass('error');
            $error.text(result).show();
            $input.one('input', () => {
              $inputBox.removeClass('error');
              $error.hide();
            }).focus();
            return false;
          }
        }
        resolve(value);
      },
      onDeny: () => resolve(null),
      onHide: () => resolve(null)
    }).modal('show');
    $input.focus();
  });
}

</script>

<% include admin_footer %>